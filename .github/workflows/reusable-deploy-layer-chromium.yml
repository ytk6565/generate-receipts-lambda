name: "Reusable deploy chromium Lambda Layer"

on:
  workflow_call:
    inputs:
      s3_bucket_name:
        type: string
        required: true
      lambda_layer_name:
        type: string
        required: true
      artifact_name:
        type: string
        required: true
    secrets:
      AWS_ACCOUNT_ID:
        required: true

permissions:
  id-token: write
  contents: read

env:
  AWS_ROLE_ARN: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_ROLE_NAME }}"
  CHROMIUM_VERSION: "131.0.1"

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.filter.outputs.targets }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            targets:
              - ".github/actions/get-lambda-layer-arn-suffix/action.yml"
              - ".github/workflows/reusable-deploy.yml"
              - ".github/workflows/reusable-deploy-layer-chromium.yml"
              - ".github/workflows/reusable-update-function-configuration.yml"

  build-chromium:
    needs: changes
    if: ${{ needs.changes.outputs.exists == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-1
          role-to-assume: ${{ env.AWS_ROLE_ARN }}

      - name: "Check if same version Chromium exists"
        id: check_same_version
        run: |
          if aws s3 ls "s3://${{ inputs.s3_bucket_name }}/chromiumLayers/chromium-v${{ env.CHROMIUM_VERSION }}-layer.zip" > /dev/null 2>&1; then
            EXISTS="true"
          else
            EXISTS="false"
          fi
          echo "EXISTS=${EXISTS}" >> $GITHUB_OUTPUT

      - name: "Fetch Chromium"
        if: steps.check_same_version.outputs.EXISTS == 'false'
        run: |
          wget "https://github.com/Sparticuz/chromium/releases/download/v${{ env.CHROMIUM_VERSION }}/chromium-v${{ env.CHROMIUM_VERSION }}-layer.zip"

      - name: "Upload to S3"
        if: steps.check_same_version.outputs.EXISTS == 'false'
        run: |
          aws s3 cp "chromium-v${{ env.CHROMIUM_VERSION }}-layer.zip" "s3://${{ inputs.s3_bucket_name }}/chromiumLayers/chromium-v${{ env.CHROMIUM_VERSION }}-layer.zip"

      - name: "Publish layer version"
        run: |
          aws lambda publish-layer-version \
          --layer-name ${{ inputs.lambda_layer_name }} \
          --description "Chromium v${{ env.CHROMIUM_VERSION }}" \
          --content "S3Bucket=${{ inputs.s3_bucket_name }},S3Key=chromiumLayers/chromium-v${{ env.CHROMIUM_VERSION }}-layer.zip" \
          --compatible-runtimes nodejs \
          --compatible-architectures x86_64
